// js/systems/heat.js - Heat and warrant management system
import { formatCurrency, formatNumber } from '../utils.js';
/**
 * HeatSystem manages heat, warrant, raids, and bribery logic.
 */
export class HeatSystem {
    constructor(gameState, eventLogger) {
        this.state = gameState;
        this.events = eventLogger;
    }

    /**
     * Calculate current heat level based on warrant, time in city, gang retaliation risk, and base/gang heat.
     * @returns {number}
     */
    calculateHeatLevel() {
        const warrantHeat = Math.min(this.state.get('warrant') / 10000, 50);
        const timeHeat = Math.max(0, this.state.get('daysInCurrentCity') - 3) * 5;
        
        // Add gang retaliation heat based on raid activity
        const currentCity = this.state.get('currentCity');
        const cityRaidActivity = this.state.getCityRaidActivity ? this.state.getCityRaidActivity(currentCity) : { count: 0 };
        const raidCount = cityRaidActivity.count || 0;
        const gangRetaliationHeat = Math.min(30, raidCount * 8); // 8% per raid, max 30%
        
        // NEW: Add base and gang heat based on level and size
        const baseGangHeat = this.calculateBaseGangHeat();
        
        const totalHeat = warrantHeat + timeHeat + gangRetaliationHeat + baseGangHeat;
        return Math.min(100, totalHeat);
    }

    /**
     * Calculate heat generated by bases and gang members.
     * Higher level bases and larger gangs attract more attention.
     * @returns {number}
     */
    calculateBaseGangHeat() {
        const bases = this.state.get('bases') || {};
        const gangMembers = this.state.get('gangMembers') || {};
        let totalHeat = 0;
        
        // Calculate heat from bases
        Object.values(bases).forEach(cityBases => {
            if (Array.isArray(cityBases)) {
                cityBases.forEach(base => {
                    if (base && base.level) {
                        // Base heat: 2% per level, max 20% per base
                        const baseHeat = Math.min(20, base.level * 2);
                        totalHeat += baseHeat;
                        
                        // Additional heat for Drug Fortress (level 4) - attracts more attention
                        if (base.level >= 4) {
                            totalHeat += 10; // Extra 10% heat for Drug Fortress
                        }
                    }
                });
            }
        });
        
        // Calculate heat from gang members
        const totalGangMembers = Object.values(gangMembers).reduce((sum, count) => sum + (count || 0), 0);
        
        // Gang heat: 0.5% per 10 gang members, max 25%
        const gangHeat = Math.min(25, Math.floor(totalGangMembers / 10) * 0.5);
        totalHeat += gangHeat;
        
        // Additional heat for very large gangs (50+ members)
        if (totalGangMembers >= 50) {
            totalHeat += 5; // Extra 5% heat for large gangs
        }
        
        // Additional heat for massive gangs (100+ members)
        if (totalGangMembers >= 100) {
            totalHeat += 10; // Extra 10% heat for massive gangs
        }
        
        return Math.min(50, totalHeat); // Cap base/gang heat at 50%
    }

    /**
     * Get detailed heat breakdown for UI display.
     * @returns {Object} Heat breakdown information
     */
    getHeatBreakdown() {
        const warrantHeat = Math.min(this.state.get('warrant') / 10000, 50);
        const timeHeat = Math.max(0, this.state.get('daysInCurrentCity') - 3) * 5;
        
        const currentCity = this.state.get('currentCity');
        const cityRaidActivity = this.state.getCityRaidActivity ? this.state.getCityRaidActivity(currentCity) : { count: 0 };
        const raidCount = cityRaidActivity.count || 0;
        const gangRetaliationHeat = Math.min(30, raidCount * 8);
        
        const baseGangHeat = this.calculateBaseGangHeat();
        
        // Get detailed base heat breakdown
        const bases = this.state.get('bases') || {};
        const gangMembers = this.state.get('gangMembers') || {};
        const totalGangMembers = Object.values(gangMembers).reduce((sum, count) => sum + (count || 0), 0);
        
        const baseHeatDetails = [];
        Object.values(bases).forEach(cityBases => {
            if (Array.isArray(cityBases)) {
                cityBases.forEach(base => {
                    if (base && base.level) {
                        const baseHeat = Math.min(20, base.level * 2);
                        let fortressBonus = 0;
                        if (base.level >= 4) {
                            fortressBonus = 10;
                        }
                        baseHeatDetails.push({
                            city: base.city,
                            level: base.level,
                            baseHeat: baseHeat,
                            fortressBonus: fortressBonus,
                            totalHeat: baseHeat + fortressBonus
                        });
                    }
                });
            }
        });
        
        // Calculate gang heat details
        const gangHeat = Math.min(25, Math.floor(totalGangMembers / 10) * 0.5);
        let largeGangBonus = 0;
        let massiveGangBonus = 0;
        
        if (totalGangMembers >= 100) {
            massiveGangBonus = 10;
        } else if (totalGangMembers >= 50) {
            largeGangBonus = 5;
        }
        
        return {
            warrantHeat: Math.round(warrantHeat),
            timeHeat: Math.round(timeHeat),
            gangRetaliationHeat: Math.round(gangRetaliationHeat),
            baseGangHeat: Math.round(baseGangHeat),
            totalHeat: Math.round(warrantHeat + timeHeat + gangRetaliationHeat + baseGangHeat),
            breakdown: {
                warrantHeat,
                timeHeat,
                gangRetaliationHeat,
                baseGangHeat,
                baseHeatDetails,
                gangHeat: {
                    totalMembers: totalGangMembers,
                    baseHeat: gangHeat,
                    largeGangBonus,
                    massiveGangBonus,
                    totalHeat: gangHeat + largeGangBonus + massiveGangBonus
                }
            }
        };
    }

    /**
     * Check for heat warnings when upgrading a base.
     * @param {number} oldLevel - Previous base level
     * @param {number} newLevel - New base level
     * @param {string} city - City where base is located
     */
    checkBaseUpgradeHeatWarning(oldLevel, newLevel, city) {
        const oldHeat = Math.min(20, oldLevel * 2) + (oldLevel >= 4 ? 10 : 0);
        const newHeat = Math.min(20, newLevel * 2) + (newLevel >= 4 ? 10 : 0);
        const heatIncrease = newHeat - oldHeat;
        
        if (heatIncrease > 0) {
            this.events.add(`🔥 Upgraded base in ${city} - Heat increased by ${heatIncrease}%`, 'warning');
            
            // Special warning for Drug Fortress
            if (newLevel >= 4 && oldLevel < 4) {
                this.events.add(`⚠️ Drug Fortress attracts major attention! Police raids more likely.`, 'warning');
            }
        }
    }

    /**
     * Check for heat warnings when recruiting gang members.
     * @param {number} newMembers - Number of new members recruited
     * @param {number} totalMembers - Total gang members after recruitment
     */
    checkGangRecruitmentHeatWarning(newMembers, totalMembers) {
        const oldTotal = totalMembers - newMembers;
        
        // Check if crossing gang size thresholds
        if (oldTotal < 50 && totalMembers >= 50) {
            this.events.add(`👥 Large gang detected! Heat increased by 5%`, 'warning');
        }
        
        if (oldTotal < 100 && totalMembers >= 100) {
            this.events.add(`👥 Massive gang detected! Heat increased by 10%`, 'warning');
        }
        
        // General warning for significant recruitment
        if (newMembers >= 10) {
            this.events.add(`👥 Recruited ${newMembers} members - Heat increased by ${Math.floor(newMembers / 10) * 0.5}%`, 'warning');
        }
    }

    /**
     * Get heat level as text.
     * @returns {string}
     */
    getHeatLevelText() {
        const heat = this.state.get('heatLevel');
        if (heat < 20) return 'Low';
        if (heat < 40) return 'Medium';
        if (heat < 70) return 'High';
        return 'Critical';
    }

    /**
     * Get heat level color class.
     * @returns {string}
     */
    getHeatColorClass() {
        const heat = this.state.get('heatLevel');
        if (heat < 20) return 'heat-low';
        if (heat < 40) return 'heat-medium';
        if (heat < 70) return 'heat-high';
        return 'heat-critical';
    }

    /**
     * Apply warrant decay when staying in same city.
     */
    applyWarrantDecay() {
        const daysSinceTravel = this.state.get('daysSinceTravel');
        if (daysSinceTravel > 0) {
            let decayRate = 0.02;
            if (daysSinceTravel >= 3) decayRate = 0.035;
            if (daysSinceTravel >= 7) decayRate = 0.05;
            if (daysSinceTravel >= 14) decayRate = 0.08;
            const currentWarrant = this.state.get('warrant');
            const warrantReduction = Math.floor(currentWarrant * decayRate);
            if (warrantReduction > 0) {
                this.state.updateWarrant(-warrantReduction);
                this.events.add(`🕊️ Laying low is working - warrant reduced by ${formatNumber(warrantReduction)}`, 'good');
                // Removed notification - only keep event log
            } else if (daysSinceTravel === 7) {
                this.events.add(`😎 Heat cooling down - warrant reduced by ${formatNumber(warrantReduction)}`, 'good');
                // Removed notification - only keep event log
            } else if (daysSinceTravel >= 14 && daysSinceTravel % 7 === 0) {
                this.events.add(`🏖️ Deep cover paying off - warrant reduced by ${formatNumber(warrantReduction)}`, 'good');
                // Removed notification - only keep event log
            }
        }
    }

    /**
     * Check for police raids and gang attacks based on heat level.
     */
    checkPoliceRaid() {
        const inventory = this.state.get('inventory');
        const hasDrugs = Object.values(inventory).some(amount => amount > 0);
        const heat = this.calculateHeatLevel();
        
        // Check for police raids (70%+ heat)
        if (heat >= 70) {
            const policeRaidChance = Math.min(0.3, (heat - 70) / 100);
            if (Math.random() < policeRaidChance) {
                this.executePoliceRaid();
                return; // Only one type of raid per check
            }
        }
        
        // Check for gang attacks (10%+ heat, requires base in city)
        if (heat >= 10) {
            const currentCity = this.state.get('currentCity');
            const hasBase = this.state.hasBase ? this.state.hasBase(currentCity) : false;
            
            // OLD GANG ATTACK SYSTEM REMOVED - Now using new BaseDefenseSystem with priority-based losses
            // The new system destroys guns/gangs first before taking drugs/cash
        }
    }

    /**
     * Execute a police raid.
     */
    executePoliceRaid() {
        const inventory = this.state.get('inventory');
        const hasDrugs = Object.values(inventory).some(amount => amount > 0);
        if (!hasDrugs) {
            this.events.add('🚔 Police raided but found no drugs in your inventory. You were left alone.', 'good');
            return;
        }
        const totalDrugs = this.state.getTotalInventory();
        const guns = this.state.get('guns');
        if (totalDrugs === 0 && guns === 0) {
            this.events.add('🚔 Police raided but found nothing! Lucky escape.', 'good');
            this.state.updateWarrant(-Math.floor(this.state.get('warrant') * 0.5));
            return;
        }
        const gunProtection = Math.min(0.4, guns * 0.02);
        const baseLossPercent = 0.3 + Math.random() * 0.4;
        const actualLossPercent = Math.max(0.1, baseLossPercent - gunProtection);
        const drugsLost = [];
        Object.keys(inventory).forEach(drug => {
            const currentAmount = inventory[drug];
            const lost = Math.floor(currentAmount * actualLossPercent);
            if (lost > 0) {
                this.state.updateInventory(drug, -lost);
                drugsLost.push(`${lost} ${drug}`);
            }
        });
        const cash = this.state.get('cash');
        const maxLoss24h = Math.floor(cash * 0.05);
        const alreadyLost = this.state.getRaidLossLast24h ? this.state.getRaidLossLast24h() : 0;
        let cashLoss = Math.floor(cash * (0.1 + Math.random() * 0.2));
        let allowedLoss = Math.max(0, maxLoss24h - alreadyLost);
        if (cashLoss > allowedLoss) cashLoss = allowedLoss;
        if (cashLoss > 0) {
            this.state.updateCash(-cashLoss);
            if (this.state.addRaidLoss) this.state.addRaidLoss(cashLoss);
        }
        const gunsLost = Math.floor(guns * (0.1 + Math.random() * 0.2));
        this.state.set('guns', Math.max(0, guns - gunsLost));
        const warrantIncrease = 5000 + Math.floor(Math.random() * 10000);
        this.state.updateWarrant(warrantIncrease);
        const assetValue = window.game?.systems?.assets?.getTotalAssetValue() || 0;
        if (assetValue > 0) {
            this.events.add('💎 Your assets were protected from the raid!', 'good');
        }
        let raidMessage = `🚔 POLICE RAID! Lost `;
        if (drugsLost.length > 0) {
            raidMessage += drugsLost.join(', ') + ', ';
        }
        raidMessage += `${formatNumber(cashLoss)} cash`;
        if (gunsLost > 0) {
            raidMessage += `, ${formatNumber(gunsLost)} guns`;
        }
        raidMessage += `, +${formatNumber(warrantIncrease)} warrant`;
        if (gunProtection > 0) {
            this.events.add(`🔫 Guns reduced raid losses by ${Math.floor(gunProtection * 100)}%`, 'good');
        }
        if (cashLoss === 0) {
            raidMessage += ' (cash loss capped for 24h)';
        }
        this.events.add(raidMessage, 'bad');
        this.state.addNotification(raidMessage, 'error');
        
        // Show modal notification for police raid
        if (window.game && window.game.ui && window.game.ui.modals) {
            let modalContent = `🚔 <strong>POLICE RAID!</strong><br><br>`;
            if (drugsLost.length > 0) {
                modalContent += `<strong>Drugs Lost:</strong> ${drugsLost.join(', ')}<br>`;
            }
            modalContent += `<strong>Cash Lost:</strong> $${formatNumber(cashLoss)}<br>`;
            if (gunsLost > 0) {
                modalContent += `<strong>Guns Lost:</strong> ${formatNumber(gunsLost)}<br>`;
            }
            modalContent += `<strong>Warrant Increase:</strong> +${formatNumber(warrantIncrease)}<br><br>`;
            if (gunProtection > 0) {
                modalContent += `<span style="color: #66ff66;">🔫 Guns reduced raid losses by ${Math.floor(gunProtection * 100)}%</span><br>`;
            }
            if (cashLoss === 0) {
                modalContent += `<span style="color: #66ccff;">💰 Cash loss was capped for 24h</span><br>`;
            }
            
            window.game.ui.modals.error(modalContent, '🚔 POLICE RAID!');
        }
    }

    /**
     * OLD GANG ATTACK SYSTEM REMOVED - Now using new BaseDefenseSystem with priority-based losses
     * The new system destroys guns/gangs first before taking drugs/cash
     */

    /**
     * Generate heat from gang activities.
     */
    generateGangHeat() {
        const gangSize = this.state.get('gangSize');
        const inventory = this.state.get('inventory');
        const hasDrugs = Object.values(inventory).some(amount => amount > 0);
        if (hasDrugs) {
            const warrantIncrease = Math.floor(gangSize * 100 * Math.random());
            if (warrantIncrease > 0) {
                this.state.updateWarrant(warrantIncrease);
                this.events.add(`Gang activities increased heat by ${formatNumber(warrantIncrease)}`, 'bad');
                // Removed notification - only keep event log
            }
        }
    }

    /**
     * Handle travel heat reduction.
     */
    applyTravelHeatReduction() {
        const currentWarrant = this.state.get('warrant');
        const heatReduction = Math.floor(currentWarrant * 0.4);
        if (heatReduction > 0) {
            this.state.updateWarrant(-heatReduction);
            this.events.add(`🌊 Travel cooled you down, heat reduced by ${formatNumber(heatReduction)}`, 'good');
        }
    }

    /**
     * Attempt to process bribery. Returns {success, error}.
     * @param {number} cost
     * @param {number} reduction
     * @returns {{success: boolean, error?: string}}
     */
    processBribery(cost, reduction) {
        if (!this.state.canAfford(cost)) {
            return { success: false, error: `Can't afford bribe. Need ${formatCurrency(cost)}` };
        }
        this.state.updateCash(-cost);
        this.state.updateWarrant(-reduction);
        this.events.add(`💰 Paid ${formatCurrency(cost)} in bribes - warrant reduced by ${formatNumber(reduction)}`, 'good');
        this.state.addNotification(`💰 Paid ${formatCurrency(cost)} in bribes - warrant reduced by ${formatNumber(reduction)}`, 'success');
        if (Math.random() < 0.05) {
            const backfireWarrant = Math.floor(cost * 0.1);
            this.state.updateWarrant(backfireWarrant);
            this.events.add(`🚨 Bribery discovered! Additional warrant: ${formatNumber(backfireWarrant)}`, 'bad');
        }
        return { success: true };
    }

    /**
     * Get heat warning message based on current heat level.
     * @returns {string|null}
     */
    getHeatWarning() {
        const heat = this.calculateHeatLevel();
        
        if (heat >= 90) {
            return "🚨 CRITICAL HEAT! Police raids imminent!";
        } else if (heat >= 80) {
            return "🔥 EXTREME HEAT! Very high risk of raids!";
        } else if (heat >= 70) {
            return "🔥 HIGH HEAT! Police raids possible!";
        } else if (heat >= 50) {
            return "⚠️ MODERATE HEAT! Stay alert!";
        } else if (heat >= 30) {
            return "🌡️ ELEVATED HEAT! Watch your back!";
        }
        
        return null;
    }

    /**
     * Calculate bribery costs.
     * @returns {{cost: number, reduction: number}}
     */
    calculateBriberyCost() {
        const warrant = this.state.get('warrant');
        const cost = warrant * 2;
        const reduction = Math.floor(warrant * 0.75);
        return { cost, reduction };
    }
}